package model.domain;

import lombok.Data;

@Data
public class Customer {
    private String id;
    private String pw;
    private String grade;
	public Customer(String id, String pw, String grade) {
		super();
		this.id = id;
		this.pw = pw;
		this.grade = grade;
	}
}


/*문자열 id/pw/grade
 * grade - vvip/vip/sliver
 * 
 */
 
 package api;

import java.util.ArrayList;

import model.domain.Customer;

public class ArrayListTest {

	public static void main(String[] args) {
		//String : 문자열 -> Customer : id/pw/grade
		ArrayList al = new ArrayList();
		al.add("string");//index 0번째 자동저장
		al.add(new Customer("tester", "77", "vvip"));//index 1
		al.add("a");
		al.add("b");
		al.add("c");
		String s = (String)al.get(0);   
		System.out.println(s);  //string
		
		
		System.out.println(al.size());//저장된 실제 데이터 개수 확인 가능환 메소드  //5
		System.out.println(al.get(0));//string
		al.remove(0);   //기존의 string 삭제
		System.out.println(al.get(0));//Customer(id=tester, pw=77, grade=vvip)
		
		System.out.println("---------------------");
		//제네릭 반영해서 ArrayList 저장 데이터 타입 제한
		ArrayList<String> al2 = new ArrayList<>();//String만 저장 가능한 ArrayList
		al2.add("an");
		al2.add("b");
		al2.add("c");
		al2.add("d");
	//	al2.add(new Customer()); 오류
		String v = al2.get(0);
			
		
		//wrapper class[autoboxing, unboxing]
		//기본값을 포장해서 객체화 하는 구조이기 때문에 wrapper
		/* 기본 8가지의 도우미 클래스 : java.lang package에 내장된 클래스들
		 * int : Integer
		 * byte : Byte */
		ArrayList<Integer> al3 = new ArrayList<>();
		al3.add(3);//al3.add(new Integer(3)); 
		al3.add(new Integer(10));
		
		/* = ( (Integer)al3.get(1) ).intValue(); */
		int i3 = al3.get(1);
		System.out.println(i3);
	}
}
/* 질문
 * 1. ArrayList 객체 생성 - 메모리 생성
 * 
 * 2. public boolean add(Object o){} 
 * 	- 저장 메소드
 *  - index 0부터 순차적으로 저장, 데이터의 구분 또한 배열처럼 index
 *
 * 3. public Object get(int index){}   
 * 	 - 반환 메소드
 * 
 * 4. public boolean remove(Object o){}
 *    public Object remove(int index){}
 * 	- 삭제
 * 
 */

package api;

import java.util.ArrayList;
import java.util.HashMap;

import model.domain.Customer;

public class HashMapTest {
	public static ArrayList<String> get1() {
		ArrayList<String> al2 = new ArrayList<>();//String만 저장 가능한 ArrayList
		al2.add("a");
		return al2;
	}
	public static ArrayList get2() {
		ArrayList<String> al2 = new ArrayList<>();//String만 저장 가능한 ArrayList
		al2.add("a");
		return al2;
	}
	
	public static void main(String[] args) {
		ArrayList v11 = get2();
		String v21 = (String)v11.get(0);
		//String v211 = v11.get(0);  오류
		
		ArrayList<String> v31 = get2();
		String v41 = v31.get(0);
		
		ArrayList v1 = get1();
		String v2 = (String)v1.get(0);
		
		ArrayList<String> v3 = get1();
		String v4 = v3.get(0);
		
		
		//key는 String타입, value도 String
		HashMap<String, String> m = new HashMap<>();
		//저장
		m.put("a", "data1");
		m.put("b", "data2");
		m.put("a", "data3");
		
		System.out.println(m);
		
		System.out.println(m.get("a")); //data3
		m.remove("b"); //data2 삭제
		System.out.println(m.get("b"));//null
		
		//key는 String타입, value는 Customer
		//key는 Customer의 id로 합시다
		HashMap<String, Customer> m2 = new HashMap<>();
		m2.put("k1", new Customer("tester", "11", "vvip"));
		System.out.println(m2.get("k1").getGrade());
		
		ArrayList<String> al2 = new ArrayList<>();//String만 저장 가능한 ArrayList
		al2.add("a");
		al2.add("b");
		al2.add("c");
		al2.add("d");
		
		HashMap<String, ArrayList> m3 = new HashMap<>();
		m3.put("al2", al2);
		System.out.println(m3.get("al2").get(2));//c
		
		HashMap<String, HashMap> m4 = new HashMap<>();
		m4.put("m3", m3);
		System.out.println( ( (ArrayList) m4.get("m3").get("al2") ).get(2));
	}
}
/* 
 * 1. key value 매핑 구조로 데이터 관리하는 자료구조 학습
 * 2. java.util.Map interface를 구현하는 모든 클래스들은 key와 value 구조
 */





